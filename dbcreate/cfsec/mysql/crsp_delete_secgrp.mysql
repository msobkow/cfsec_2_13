--
--	@(#) dbcreate/cfsec/mysql/crsp_delete_secgrp.mysql
--
--	org.msscf.msscf.CFSec
--
--	Copyright (c) 2020 Mark Stephen Sobkow
--	
--	MSS Code Factory CFSec 2.13 Security Essentials
--	
--	Copyright 2020 Mark Stephen Sobkow
--	
--		This file is part of MSS Code Factory.
--	
--		MSS Code Factory is available under dual commercial license from Mark Stephen
--		Sobkow, or under the terms of the GNU General Public License, Version 3
--		or later.
--	
--	    MSS Code Factory is free software: you can redistribute it and/or modify
--	    it under the terms of the GNU General Public License as published by
--	    the Free Software Foundation, either version 3 of the License, or
--	    (at your option) any later version.
--	
--	    MSS Code Factory is distributed in the hope that it will be useful,
--	    but WITHOUT ANY WARRANTY; without even the implied warranty of
--	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--	    GNU General Public License for more details.
--	
--	    You should have received a copy of the GNU General Public License
--	    along with MSS Code Factory.  If not, see <https://www.gnu.org/licenses/>.
--	
--	Donations to support MSS Code Factory can be made at
--	https://www.paypal.com/paypalme2/MarkSobkow
--	
--	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
--
--	Manufactured by MSS Code Factory 2.12
--
delimiter ////
create procedure cfsec213.sp_delete_secgrp(
	argAuditClusterId bigint,
	argAuditUserId varchar(36),
	argAuditSessionId varchar(36),
	secClusterId bigint,
	secTenantId bigint,
	argClusterId bigint,
	argSecGroupId integer,
	argRevision int )
not deterministic
modifies sql data
begin
	declare RowsAffected bigint;
	declare oldClusterId bigint;
	declare oldSecGroupId integer;
	declare oldName varchar(64);
	declare oldIsVisible boolean;
	declare oldRevision int;
	declare permissionFlag boolean;
	declare isSystemUser boolean;
	declare done int default false;
	declare delsecgroupformsClusterId bigint;
	declare delsecgroupformsSecGroupFormId bigint;
	declare delsecgrpincbygroupClusterId bigint;
	declare delsecgrpincbygroupSecGrpIncId bigint;
	declare delsecgrpmembsClusterId bigint;
	declare delsecgrpmembsSecGrpMembId bigint;
	declare delsecgrpincsClusterId bigint;
	declare delsecgrpincsSecGrpIncId bigint;
	declare cur_delsecgroupforms cursor for
		select
			a00d.clusid,
			a00d.secgrpfrmid
		from cfsec213.SecGrp as a00c
			inner join cfsec213.SecGrpFrm a00d on
				a00c.clusterid = a00d.clusid
				and a00c.secgroupid = a00d.secgrpid
		where
			a00c.clusterid = argClusterId
			and a00c.secgroupid = argSecGroupId;
	declare cur_delsecgrpincbygroup cursor for
		select
			a00e.clusid,
			a00e.secgrpincid
		from cfsec213.SecGrp as a00c
			inner join cfsec213.SecInc a00e on
				a00c.clusterid = a00e.clusid
				and a00c.secgroupid = a00e.incgrpid
		where
			a00c.clusterid = argClusterId
			and a00c.secgroupid = argSecGroupId;
	declare cur_delsecgrpmembs cursor for
		select
			a00f.clusterid,
			a00f.secgrpmembid
		from cfsec213.SecGrp as a00c
			inner join cfsec213.SecMemb a00f on
				a00c.clusterid = a00f.clusterid
				and a00c.secgroupid = a00f.secgroupid
		where
			a00c.clusterid = argClusterId
			and a00c.secgroupid = argSecGroupId;
	declare cur_delsecgrpincs cursor for
		select
			a00e.clusid,
			a00e.secgrpincid
		from cfsec213.SecGrp as a00c
			inner join cfsec213.SecInc a00e on
				a00c.clusterid = a00e.clusid
				and a00c.secgroupid = a00e.secgrpid
		where
			a00c.clusterid = argClusterId
			and a00c.secgroupid = argSecGroupId;
	declare continue handler for not found set done = true;
	select
			ClusterId,
		SecGroupId,
		safe_name,
		IsVisible,
			revision
	into
		oldClusterId,
			oldSecGroupId,
			oldName,
			oldIsVisible,
		oldRevision
	from cfsec213.SecGrp
	where
		ClusterId = argClusterId
		and SecGroupId = argSecGroupId
	for update;
	if( oldClusterId != secClusterId )
	then
		select cfsec213.sp_is_system_user( argAuditUserId )

		into permissionFlag;
		if( permissionFlag = false )
		then
			signal sqlstate '45001'
			set message_text = 'sp_delete_secgrp() Permission denied, not identified as system',
				schema_name = 'cfsec213',
				table_name = 'SecGrp';
		end if;
	end if;

	select cfsec213.sp_is_cluster_user( oldClusterId,
			'DeleteSecGroup',
			argAuditUserId ),
		cfsec213.sp_is_system_user( argAuditUserId )
	into permissionFlag, isSystemUser;

	if( ( permissionFlag = false ) and ( isSystemUser = false ) )
	then
		signal sqlstate '45002'
		set message_text = 'sp_delete_secgrp() Permission denied, not granted access to DeleteSecGroup for current Cluster',
			schema_name = 'cfsec213',
			table_name = 'SecGrp';
	end if;

	insert into cfsec213.SecGrp_h (
			clusterid,
			secgroupid,
			auditclusterid,
			auditsessionid,
			auditstamp,
			safe_name,
			isvisible,
			revision,
			auditaction )
		select
			a00c.clusterid,
			a00c.secgroupid,
			argAuditClusterId,
			argAuditSessionId,
			now(),
			a00c.safe_name,
			a00c.isvisible,
			a00c.revision + 1,
			3
		from cfsec213.SecGrp as a00c
		where
			a00c.clusterid = argClusterId
		and a00c.secgroupid = argSecGroupId;

	set done = false;
	open cur_delsecgroupforms;
	read_loop_delsecgroupforms: loop
		fetch cur_delsecgroupforms into
			delsecgroupformsClusterId,
			delsecgroupformsSecGroupFormId;
		if done then
			leave read_loop_delsecgroupforms;
		end if;
		call cfsec213.sp_delete_secgrpfrm_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			delsecgroupformsClusterId,
			delsecgroupformsSecGroupFormId );
	end loop;
	close cur_delsecgroupforms;
	set done = false;
	open cur_delsecgrpincbygroup;
	read_loop_delsecgrpincbygroup: loop
		fetch cur_delsecgrpincbygroup into
			delsecgrpincbygroupClusterId,
			delsecgrpincbygroupSecGrpIncId;
		if done then
			leave read_loop_delsecgrpincbygroup;
		end if;
		call cfsec213.sp_delete_secinc_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			delsecgrpincbygroupClusterId,
			delsecgrpincbygroupSecGrpIncId );
	end loop;
	close cur_delsecgrpincbygroup;
	set done = false;
	open cur_delsecgrpmembs;
	read_loop_delsecgrpmembs: loop
		fetch cur_delsecgrpmembs into
			delsecgrpmembsClusterId,
			delsecgrpmembsSecGrpMembId;
		if done then
			leave read_loop_delsecgrpmembs;
		end if;
		call cfsec213.sp_delete_secmemb_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			delsecgrpmembsClusterId,
			delsecgrpmembsSecGrpMembId );
	end loop;
	close cur_delsecgrpmembs;
	set done = false;
	open cur_delsecgrpincs;
	read_loop_delsecgrpincs: loop
		fetch cur_delsecgrpincs into
			delsecgrpincsClusterId,
			delsecgrpincsSecGrpIncId;
		if done then
			leave read_loop_delsecgrpincs;
		end if;
		call cfsec213.sp_delete_secinc_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			delsecgrpincsClusterId,
			delsecgrpincsSecGrpIncId );
	end loop;
	close cur_delsecgrpincs;
	delete from cfsec213.SecGrp
	where
		clusterid = argClusterId
		and secgroupid = argSecGroupId;
	select row_count()
	into RowsAffected;

	if RowsAffected != 1 and RowsAffected != 0
	then
		signal sqlstate '45000'
		set message_text = 'sp_delete_secgrp() Expected to affect 1 SecGrp',
			schema_name = 'cfsec213',
			table_name = 'SecGrp';
	end if;

end;////
